package orego.book;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.*;
import orego.core.Board;
import static orego.experiment.Debug.*;
import static orego.book.JosekiBookBuilder.isInCorner;
import static orego.core.Coordinates.*;

/**
 * Suggests a joseki move (in the same corner as the last move if possible). In
 * empty corners, always suggests a 4-4 point.
 */
public class JosekiBook implements OpeningBook, Serializable {

	/** The four-four points. */
	public static final int[] FOUR_FOUR_POINTS = { at("d16"), at("q16"),
			at("q4"), at("d4") };

	/** For serialization. */
	private static final long serialVersionUID = 1L;

	/** The book proper. */
	private Map<Long, Integer> book;

	/** Gets the hashMap out of the file. */
	public JosekiBook() {
		this("SgfFiles");
	}

	@SuppressWarnings("unchecked")
	public JosekiBook(String directory) {
		try {
			directory = OREGO_ROOT_DIRECTORY + directory + File.separator
					+ getBoardWidth();
			File file = new File(directory + File.separator + "Joseki"
					+ getBoardWidth() + ".data");
			ObjectInputStream in = new ObjectInputStream(new FileInputStream(
					file));
			book = (HashMap<Long, Integer>) (in.readObject());
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	/** Returns a board like board, but with all stones not in corner removed. */
	public Board createJosekiBoard(Board board, int corner) {
		Board josekiBoard = new Board();
		int[] moves = board.getMoves();
		for (int i = 0; i < board.getTurn(); i++) {
			if (isInCorner(moves[i], corner)) {
				if (josekiBoard.getKoPoint() == moves[i]) {
					josekiBoard.pass();
					josekiBoard.pass();
				}
				josekiBoard.play(moves[i]);
			} else {
				josekiBoard.pass();
			}
		}
		return josekiBoard;
	}

	public int nextMove(Board board) {
		if (board.getTurn() < BookBuilder.MAX_BOOK_DEPTH * 4) {
			debug("Looking for joseki move");
			int lastCorner = 0;
			if (board.getTurn() > 0) {
				int lastMove = board.getMove(board.getTurn() - 1);
				for (int i = 0; i < 4; i++) {
					if (isInCorner(lastMove, i)) {
						lastCorner = i;
						break;
					}
				}
			}
			int corner = lastCorner;
			do {
				Board josekiBoard = createJosekiBoard(board, corner);
				long jBoardHash = josekiBoard.getHash();
				if (book.containsKey(jBoardHash)) {
					int move = book.get(jBoardHash);
					// The isLegal() check below is to prevent
					// a hash collision from producing an illegal move
					if (board.isLegal(move)) {
						debug(pointToString(move)
								+ " was generated by the joseki book");
						return move;
					}
				}
				// Try a 4-4 point in an empty corner
				if (jBoardHash == -1L || jBoardHash == 0L) {
					int move = FOUR_FOUR_POINTS[corner];
					if (board.isLegal(move)) {
						debug(pointToString(move)
								+ " was generated by the joseki book");
						return move;
					}
				}
				corner = (corner + 1) % 4;
			} while (corner != lastCorner);
		}
		return NO_POINT;
	}

}
